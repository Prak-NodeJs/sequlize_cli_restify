sequelize cli..
steps;;

install sequelize

npm install --save-dev sequelize-cli

project intilization.
npx sequelize-cli init

Creating the first Model (and Migration)


npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

npx sequelize-cli model:generate --name Product --attributes title:string,price:integer,quantity:integer,stock:integer

npx sequelize-cli model:generate --name Category --attributes title:string,images:json


migrate tables;
npx sequelize-cli db:migrate



//undo all migration
undo most recent migration

npx sequelize-cli db:migrate:undo

//undo all migration
npx sequelize-cli db:migrate:undo:all












 userId: {
        type: Sequelize.DataTypes.INTEGER,
        references: {
          model: {
            tableName: 'users',
          },
          key: 'id'
        },
        allowNull: false
      },
       categoryId:{
       type:Sequelize.INTEGER,
       references: {
        model: {
          tableName: 'Categories',
        },
        key: 'id'
      },
      allowNull: false
    },



    'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Category extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      Category.hasMany(models.Product, {
        foreignKey:'categoryId',
        onDelete:'CASCADE',
        onUpdate:'CASCADE'
      })
    }
  }
  Category.init({
    title: {
      type:DataTypes.STRING,
      allowNull:false,
      unique:true
    },
    images: {
      allowNull:false,
      type:DataTypes.JSON
    }
  }, {
    sequelize,
    modelName: 'Category',
  });
  return Category;
};



 static associate(models) {
      Product.belongsTo(models.User,{
        foreignKey:'userId'
      }) 
      Product.belongsTo(models.Category,{
        foreignKey:'categoryId'
      })
    }